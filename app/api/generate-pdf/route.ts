import { NextRequest, NextResponse } from 'next/server';
import { getRightsCardById } from '@/lib/data';

export async function POST(request: NextRequest) {
  try {
    const { cardId } = await request.json();

    if (!cardId) {
      return NextResponse.json(
        { error: 'Card ID is required' },
        { status: 400 }
      );
    }

    const card = await getRightsCardById(cardId);

    if (!card) {
      return NextResponse.json(
        { error: 'Rights card not found' },
        { status: 404 }
      );
    }

    // In a production environment, you would use a library like Puppeteer or jsPDF
    // to generate actual PDFs. For now, we'll return a mock response.
    
    const pdfContent = `
      <!DOCTYPE html>
      <html>
        <head>
          <title>${card.title}</title>
          <style>
            body { font-family: Arial, sans-serif; margin: 40px; line-height: 1.6; }
            h1 { color: #2563eb; border-bottom: 2px solid #2563eb; padding-bottom: 10px; }
            h2 { color: #1e40af; margin-top: 30px; }
            ul { margin: 10px 0; padding-left: 20px; }
            li { margin: 5px 0; }
            .header { text-align: center; margin-bottom: 40px; }
            .footer { margin-top: 40px; padding-top: 20px; border-top: 1px solid #ccc; font-size: 12px; color: #666; }
          </style>
        </head>
        <body>
          <div class="header">
            <h1>${card.title}</h1>
            <p><strong>Jurisdiction:</strong> ${card.jurisdiction} | <strong>Language:</strong> ${card.language}</p>
          </div>
          
          <div class="content">
            ${card.content}
          </div>
          
          <div class="footer">
            <p><strong>Disclaimer:</strong> This information is for educational purposes only and does not constitute legal advice. Always consult with a qualified attorney for legal advice specific to your situation.</p>
            <p>Generated by RightsGuard AI - ${new Date().toLocaleDateString()}</p>
          </div>
        </body>
      </html>
    `;

    // Return the HTML content that can be used to generate a PDF on the client side
    return NextResponse.json({
      success: true,
      htmlContent: pdfContent,
      filename: `${card.title.replace(/[^a-zA-Z0-9]/g, '_')}.pdf`,
      card: {
        id: card.cardId,
        title: card.title,
        scenario: card.scenario
      }
    });

  } catch (error) {
    console.error('Error generating PDF:', error);
    return NextResponse.json(
      { error: 'Failed to generate PDF' },
      { status: 500 }
    );
  }
}
